{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;SCwBgB,yCAAkB,CAAC,KAAsB,EAAmB,CAAC;IAC3E,KAAK,EAAE,MAAK,EAAE,QAAQ,IAAI,2CAAkB,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,QAAQ;IAC5F,GAAG,CAAC,GAAG,GAAG,mBAAM,CAAC,MAAK;IAEtB,KAAK,CAAC,iBAAiB,IAAI,KAAK,GAAK,CAAC;QACpC,EAAE,EAAE,KAAK,KAAK,CAAE,KAAI,iCAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,GAAG,CAAC;YACvD,KAAK,GAAG,KAAK,KAAK,CAAE,IAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,IAAI,KAAK;YAClD,QAAQ,CAAC,KAAK;YACd,GAAG,CAAC,OAAO,GAAG,KAAK;QACrB,CAAC;IACH,CAAC;IAED,KAAK,CAAC,WAAW,OAAS,CAAC;QACzB,GAAG,CAAC,GAAG,GAAI,MAAK,KAAK,CAAE,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAK,EAAE,EAAE,IAAI,CAAC;QACtD,EAAE,EAAE,iCAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC;YACrC,GAAG,CAAC,OAAO,GAAG,GAAG;YACjB,QAAQ,CAAC,GAAG;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,WAAW,OAAS,CAAC;QACzB,GAAG,CAAC,GAAG,GAAI,MAAK,KAAK,CAAE,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAK,EAAE,EAAE,IAAI,CAAC;QACtD,EAAE,EAAE,iCAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC;YACrC,GAAG,CAAC,OAAO,GAAG,GAAG;YACjB,QAAQ,CAAC,GAAG;QACd,CAAC;IACH,CAAC;IAED,MAAM,CAAC,CAAC;QACN,QAAQ,EAAE,iBAAiB;qBAC3B,WAAW;qBACX,WAAW;aACX,GAAG;eACH,MAAK;IACP,CAAC;AACH,CAAC;SAEQ,iCAAW,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC;IACtC,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE;IACxB,UAAU,GAAG,QAAQ,CAAC,UAAU,EAAE,EAAE;IACpC,MAAM,EAAE,KAAK,CAAC,IAAI,KAAM,IAAI,IAAI,CAAC,IAAI,UAAU,IAAI,IAAI,IAAI,UAAU;AACvE,CAAC","sources":["packages/@react-stately/pagination/src/index.ts","packages/@react-stately/pagination/src/usePaginationState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport * from './usePaginationState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PaginationProps} from '@react-types/pagination';\nimport {useControlledState} from '@react-stately/utils';\nimport {useRef} from 'react';\n\nexport interface PaginationState {\n  onChange?: (val: string | number) => void,\n  onDecrement?: () => void,\n  onIncrement?: () => void,\n  ref?: {current: number},\n  value?: any\n}\n\nexport function usePaginationState(props: PaginationProps): PaginationState {\n  const [value, setValue] = useControlledState(props.value, props.defaultValue, props.onChange);\n  let ref = useRef(value);\n\n  const onPageInputChange = (value) => {\n    if (value === '' || isValidPage(props.maxValue, value)) {\n      value = value !== '' ? parseInt(value, 10) : value;\n      setValue(value);\n      ref.current = value;\n    }\n  };\n\n  const onIncrement = () => {\n    let val = (value === '') ? 1 : parseInt(value, 10) + 1;\n    if (isValidPage(props.maxValue, val)) {\n      ref.current = val;\n      setValue(val);\n    }\n  };\n\n  const onDecrement = () => {\n    let val = (value === '') ? 1 : parseInt(value, 10) - 1;\n    if (isValidPage(props.maxValue, val)) {\n      ref.current = val;\n      setValue(val);\n    }\n  };\n\n  return {\n    onChange: onPageInputChange,\n    onDecrement,\n    onIncrement,\n    ref,\n    value\n  };\n}\n\nfunction isValidPage(totalPages, page) {\n  page = parseInt(page, 10);\n  totalPages = parseInt(totalPages, 10);\n  return !isNaN(page) && (page >= 1 && totalPages && page <= totalPages);\n}\n"],"names":[],"version":3,"file":"main.js.map"}